// Distance
Int dOff;
dOff.Set(&d[idx]);

// Apply offset based on type
if (idx % 2 >= WILD && idx % 2 <= WILD50) {
    Int wildOffset = CalculateWildOffset(idx % 2); // Define CalculateWildOffset() as needed to handle offsets for WILD types
    dOff.ModAddK1order(&wildOffset);
}

inputKangarooPinned[g * strideSize + t + 8 * nbThreadPerGroup] = dOff.bits64[0];
inputKangarooPinned[g * strideSize + t + 9 * nbThreadPerGroup] = dOff.bits64[1];

#ifdef USE_SYMMETRY
// Last jump
inputKangarooPinned[t + 10 * nbThreadPerGroup] = (uint64_t)NB_JUMP;
#endif
